# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI_version1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import sys
import glob
import pickle
import datetime
import numpy as np
import pandas as pd
from time import sleep
from docx import Document
from docx.oxml.ns import qn
from PyQt5.QtGui import QIcon
from win32com import client as wc
from docx.shared import Pt,RGBColor
from PyQt5.QtCore import QUrl,Qt,QThread
from PyQt5 import QtCore, QtGui, QtWidgets
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.select import Select
from selenium.webdriver import Edge
from PyQt5.QtWebEngineWidgets import QWebEngineView
from webdriver_manager.microsoft import  EdgeChromiumDriverManager
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT,WD_LINE_SPACING
from PyQt5.QtWidgets import QWidget,QApplication,QTableWidgetItem,QHeaderView,QMessageBox,QFileDialog,QProgressBar,QProgressDialog



class Meteo_DataService(QWidget):
    def __init__(self):
        super(Meteo_DataService,self).__init__()
        self.setWindowTitle('气象资料证明业务应用软件 V1.0')
        self.setWindowIcon(QIcon('icon.ico'))
        self.resize(1466,618)
        self.initUI()
    def initUI(self):
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sizePolicy().hasHeightForWidth())
        self.setSizePolicy(sizePolicy)
        self.stackedWidget = QtWidgets.QStackedWidget(self)
        self.stackedWidget.setGeometry(QtCore.QRect(580, 10, 531, 601))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(5)
        sizePolicy.setVerticalStretch(5)
        sizePolicy.setHeightForWidth(self.stackedWidget.sizePolicy().hasHeightForWidth())
        self.stackedWidget.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        font.setKerning(False)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.stackedWidget.setFont(font)
        self.stackedWidget.setAutoFillBackground(True)
        self.stackedWidget.setObjectName("stackedWidget")
        self.stackedWidgetPage1 = QtWidgets.QWidget()
        self.stackedWidgetPage1.setObjectName("stackedWidgetPage1")
        self.widget_3 = QtWidgets.QWidget(self.stackedWidgetPage1)
        self.widget_3.setGeometry(QtCore.QRect(20, 370, 501, 181))
        self.widget_3.setStyleSheet("border:2px solid;\n"
"border-radius:5px")
        self.widget_3.setObjectName("widget_3")
        self.label = QtWidgets.QLabel(self.widget_3)
        self.label.setGeometry(QtCore.QRect(9, 9, 483, 19))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.label.setFont(font)
        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label.setStyleSheet("font: 75 11pt \"等线\";\n"
"border:none;\n"
"background-color: rgb(62, 255, 133);")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.horizontalWidget_2 = QtWidgets.QWidget(self.widget_3)
        self.horizontalWidget_2.setGeometry(QtCore.QRect(10, 40, 481, 41))
        self.horizontalWidget_2.setStyleSheet("border:none")
        self.horizontalWidget_2.setObjectName("horizontalWidget_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalWidget_2)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.Client_Label = QtWidgets.QLabel(self.horizontalWidget_2)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.Client_Label.setFont(font)
        self.Client_Label.setStyleSheet("border:none")
        self.Client_Label.setObjectName("Client_Label")
        self.horizontalLayout.addWidget(self.Client_Label)
        self.Client_LineEdit = QtWidgets.QLineEdit(self.horizontalWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Client_LineEdit.sizePolicy().hasHeightForWidth())
        self.Client_LineEdit.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        font.setKerning(False)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.Client_LineEdit.setFont(font)
        self.Client_LineEdit.setAutoFillBackground(False)
        self.Client_LineEdit.setStyleSheet("border:2px solid;\n"
"border-radius:8px")
        self.Client_LineEdit.setInputMask("")
        self.Client_LineEdit.setText("")
        self.Client_LineEdit.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.Client_LineEdit.setCursorMoveStyle(QtCore.Qt.VisualMoveStyle)
        self.Client_LineEdit.setObjectName("Client_LineEdit")
        self.horizontalLayout.addWidget(self.Client_LineEdit)
        spacerItem = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.Usage_Label = QtWidgets.QLabel(self.horizontalWidget_2)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.Usage_Label.setFont(font)
        self.Usage_Label.setStyleSheet("border:none")
        self.Usage_Label.setObjectName("Usage_Label")
        self.horizontalLayout.addWidget(self.Usage_Label)
        self.Usage_Combox = QtWidgets.QComboBox(self.horizontalWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Usage_Combox.sizePolicy().hasHeightForWidth())
        self.Usage_Combox.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        font.setKerning(False)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.Usage_Combox.setFont(font)
        self.Usage_Combox.setAutoFillBackground(True)
        self.Usage_Combox.setStyleSheet("border:2px solid;\n"
"border-radius:8px;\n"
"font: 9pt \"幼圆\";")
        self.Usage_Combox.setInputMethodHints(QtCore.Qt.ImhNone)
        self.Usage_Combox.setEditable(True)
        self.Usage_Combox.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
        self.Usage_Combox.setDuplicatesEnabled(True)
        self.Usage_Combox.setObjectName("Usage_Combox")
        self.Usage_Combox.addItem("")
        self.Usage_Combox.addItem("")
        self.Usage_Combox.addItem("")
        self.Usage_Combox.addItem("")
        self.Usage_Combox.addItem("")
        self.Usage_Combox.addItem("")
        self.Usage_Combox.addItem("")
        self.Usage_Combox.addItem("")
        self.Usage_Combox.addItem("")
        self.horizontalLayout.addWidget(self.Usage_Combox)
        self.horizontalWidget_3 = QtWidgets.QWidget(self.widget_3)
        self.horizontalWidget_3.setGeometry(QtCore.QRect(10, 80, 481, 51))
        self.horizontalWidget_3.setStyleSheet("border:none")
        self.horizontalWidget_3.setObjectName("horizontalWidget_3")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.horizontalWidget_3)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.Starttime_Label = QtWidgets.QLabel(self.horizontalWidget_3)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.Starttime_Label.setFont(font)
        self.Starttime_Label.setStyleSheet("border:none")
        self.Starttime_Label.setTextFormat(QtCore.Qt.MarkdownText)
        self.Starttime_Label.setObjectName("Starttime_Label")
        self.horizontalLayout_4.addWidget(self.Starttime_Label)
        self.Starttime_DateEdit = QtWidgets.QDateEdit(self.horizontalWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Starttime_DateEdit.sizePolicy().hasHeightForWidth())
        self.Starttime_DateEdit.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Calibri Light")
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.Starttime_DateEdit.setFont(font)
        self.Starttime_DateEdit.setStyleSheet("border:2px solid;\n"
"border-radius:8px")
        self.Starttime_DateEdit.setDate(QtCore.QDate.currentDate())
        self.Starttime_DateEdit.setMinimumDateTime(QtCore.QDateTime(QtCore.QDate(1930, 1, 1), QtCore.QTime(0, 0, 0)))
        self.Starttime_DateEdit.setCalendarPopup(True)
        self.Starttime_DateEdit.setObjectName("Starttime_DateEdit")
        self.horizontalLayout_4.addWidget(self.Starttime_DateEdit)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem1)
        self.Endtime_Label = QtWidgets.QLabel(self.horizontalWidget_3)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.Endtime_Label.setFont(font)
        self.Endtime_Label.setStyleSheet("border:none")
        self.Endtime_Label.setTextFormat(QtCore.Qt.MarkdownText)
        self.Endtime_Label.setObjectName("Endtime_Label")
        self.horizontalLayout_4.addWidget(self.Endtime_Label)
        self.Endtime_DateEdit = QtWidgets.QDateEdit(self.horizontalWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Endtime_DateEdit.sizePolicy().hasHeightForWidth())
        self.Endtime_DateEdit.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Calibri Light")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.Endtime_DateEdit.setFont(font)
        self.Endtime_DateEdit.setStyleSheet("border:2px solid;\n"
"border-radius:8px")
        self.Endtime_DateEdit.setDate(QtCore.QDate.currentDate())
        self.Endtime_DateEdit.setMinimumDateTime(QtCore.QDateTime(QtCore.QDate(1930, 1, 1), QtCore.QTime(0, 0, 0)))
        self.Endtime_DateEdit.setCalendarPopup(True)
        self.Endtime_DateEdit.setObjectName("Endtime_DateEdit")
        self.horizontalLayout_4.addWidget(self.Endtime_DateEdit)
        self.horizontalWidget_4 = QtWidgets.QWidget(self.widget_3)
        self.horizontalWidget_4.setGeometry(QtCore.QRect(10, 130, 481, 41))
        self.horizontalWidget_4.setStyleSheet("border:none")
        self.horizontalWidget_4.setObjectName("horizontalWidget_4")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.horizontalWidget_4)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.Station_Label = QtWidgets.QLabel(self.horizontalWidget_4)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.Station_Label.setFont(font)
        self.Station_Label.setStyleSheet("border:none")
        self.Station_Label.setObjectName("Station_Label")
        self.horizontalLayout_5.addWidget(self.Station_Label)
        self.Station_LineEdit = QtWidgets.QLineEdit(self.horizontalWidget_4)
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        font.setKerning(False)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.Station_LineEdit.setFont(font)
        self.Station_LineEdit.setStyleSheet("border:2px solid;\n"
"border-radius:8px")
        self.Station_LineEdit.setObjectName("Station_LineEdit")
        self.horizontalLayout_5.addWidget(self.Station_LineEdit)
        self.Operator_Label = QtWidgets.QLabel(self.horizontalWidget_4)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.Operator_Label.setFont(font)
        self.Operator_Label.setStyleSheet("border:none")
        self.Operator_Label.setObjectName("Operator_Label")
        self.horizontalLayout_5.addWidget(self.Operator_Label)
        self.Operator_Combox = QtWidgets.QComboBox(self.horizontalWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Operator_Combox.sizePolicy().hasHeightForWidth())
        self.Operator_Combox.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        font.setKerning(False)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.Operator_Combox.setFont(font)
        self.Operator_Combox.setAutoFillBackground(True)
        self.Operator_Combox.setStyleSheet("border:2px solid;\n"
"border-radius:8px;\n"
"font: 9pt \"幼圆\";")
        self.Operator_Combox.setInputMethodHints(QtCore.Qt.ImhNone)
        self.Operator_Combox.setEditable(True)
        self.Operator_Combox.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
        self.Operator_Combox.setDuplicatesEnabled(True)
        self.Operator_Combox.setObjectName("Operator_Combox")
        self.Operator_Combox.addItem("")
        self.Operator_Combox.addItem("")
        self.Operator_Combox.addItem("")
        self.Operator_Combox.addItem("")
        self.Operator_Combox.addItem("")
        self.Operator_Combox.addItem("")
        self.Operator_Combox.addItem("")
        self.Operator_Combox.setItemText(6, "")
        self.horizontalLayout_5.addWidget(self.Operator_Combox)
        self.Makedate_Label = QtWidgets.QLabel(self.horizontalWidget_4)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.Makedate_Label.setFont(font)
        self.Makedate_Label.setStyleSheet("border:none")
        self.Makedate_Label.setObjectName("Makedate_Label")
        self.horizontalLayout_5.addWidget(self.Makedate_Label)
        self.Makedate_LineEdit = QtWidgets.QLineEdit(self.horizontalWidget_4)
        self.Makedate_LineEdit.setEnabled(True)
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        font.setKerning(False)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.Makedate_LineEdit.setFont(font)
        self.Makedate_LineEdit.setStyleSheet("border:2px solid;\n"
"border-radius:8px")
        self.Makedate_LineEdit.setObjectName("Makedate_LineEdit")
        self.horizontalLayout_5.addWidget(self.Makedate_LineEdit)
        self.widget = QtWidgets.QWidget(self.stackedWidgetPage1)
        self.widget.setGeometry(QtCore.QRect(20, 10, 501, 351))
        self.widget.setStyleSheet("border:2px solid;\n"
"border-radius:5px")
        self.widget.setObjectName("widget")
        self.gridWidget = QtWidgets.QWidget(self.widget)
        self.gridWidget.setGeometry(QtCore.QRect(70, 180, 391, 71))
        self.gridWidget.setStyleSheet("border:none")
        self.gridWidget.setObjectName("gridWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.HighTemp_CB = QtWidgets.QCheckBox(self.gridWidget)
        font = QtGui.QFont()
        font.setFamily("幼圆")
        self.HighTemp_CB.setFont(font)
        self.HighTemp_CB.setObjectName("HighTemp_CB")
        self.buttonGroup = QtWidgets.QButtonGroup(self)
        self.buttonGroup.setObjectName("buttonGroup")
        self.buttonGroup.addButton(self.HighTemp_CB,1)
        self.gridLayout.addWidget(self.HighTemp_CB, 0, 1, 1, 1)
        self.MaxSpeed_CB = QtWidgets.QCheckBox(self.gridWidget)
        font = QtGui.QFont()
        font.setFamily("幼圆")
        self.MaxSpeed_CB.setFont(font)
        self.MaxSpeed_CB.setObjectName("MaxSpeed_CB")
        self.buttonGroup.addButton(self.MaxSpeed_CB,5)
        self.gridLayout.addWidget(self.MaxSpeed_CB, 1, 2, 1, 1)
        self.LowTemp_CB = QtWidgets.QCheckBox(self.gridWidget)
        font = QtGui.QFont()
        font.setFamily("幼圆")
        self.LowTemp_CB.setFont(font)
        self.LowTemp_CB.setObjectName("LowTemp_CB")
        self.buttonGroup.addButton(self.LowTemp_CB,2)
        self.gridLayout.addWidget(self.LowTemp_CB, 0, 2, 1, 1)
        self.Visibility_CB = QtWidgets.QCheckBox(self.gridWidget)
        font = QtGui.QFont()
        font.setFamily("幼圆")
        self.Visibility_CB.setFont(font)
        self.Visibility_CB.setObjectName("Visibility_CB")
        self.buttonGroup.addButton(self.Visibility_CB,4)
        self.gridLayout.addWidget(self.Visibility_CB, 1, 1, 1, 1)
        self.RainFall_CB = QtWidgets.QCheckBox(self.gridWidget)
        font = QtGui.QFont()
        font.setFamily("幼圆")
        self.RainFall_CB.setFont(font)
        self.RainFall_CB.setObjectName("RainFall_CB")
        self.buttonGroup.addButton(self.RainFall_CB,3)
        self.gridLayout.addWidget(self.RainFall_CB, 1, 0, 1, 1)
        self.HourTemp_CB = QtWidgets.QCheckBox(self.gridWidget)
        font = QtGui.QFont()
        font.setFamily("幼圆")
        self.HourTemp_CB.setFont(font)
        self.HourTemp_CB.setObjectName("HourTemp_CB")
        self.buttonGroup.addButton(self.HourTemp_CB,0)
        self.HourTemp_CB.setChecked(True)
        self.gridLayout.addWidget(self.HourTemp_CB, 0, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.widget)
        self.label_2.setGeometry(QtCore.QRect(10, 150, 481, 21))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(9)
        self.label_2.setFont(font)
        self.label_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_2.setStyleSheet("font: 75 11pt \"等线\";\n"
"border:none;\n"
"background-color: rgb(62, 255, 133);")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.horizontalFrame = QtWidgets.QFrame(self.widget)
        self.horizontalFrame.setGeometry(QtCore.QRect(30, 300, 181, 41))
        self.horizontalFrame.setStyleSheet("border:none")
        self.horizontalFrame.setObjectName("horizontalFrame")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalFrame)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.Condition_Label = QtWidgets.QLabel(self.horizontalFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Condition_Label.sizePolicy().hasHeightForWidth())
        self.Condition_Label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.Condition_Label.setFont(font)
        self.Condition_Label.setStyleSheet("border:none")
        self.Condition_Label.setAlignment(QtCore.Qt.AlignCenter)
        self.Condition_Label.setObjectName("Condition_Label")
        self.horizontalLayout_2.addWidget(self.Condition_Label)
        self.Condition_Combox = QtWidgets.QComboBox(self.horizontalFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Condition_Combox.sizePolicy().hasHeightForWidth())
        self.Condition_Combox.setSizePolicy(sizePolicy)
        self.Condition_Combox.setStyleSheet("border:2px solid;\n"
"border-radius:8px;\n"
"font: 9pt \"幼圆\";")
        self.Condition_Combox.setObjectName("Condition_Combox")
        self.Condition_Combox.addItem("")
        self.Condition_Combox.addItem("")
        self.horizontalLayout_2.addWidget(self.Condition_Combox)
        self.horizontalFrame_2 = QtWidgets.QFrame(self.widget)
        self.horizontalFrame_2.setGeometry(QtCore.QRect(330, 300, 151, 41))
        self.horizontalFrame_2.setStyleSheet("border:none")
        self.horizontalFrame_2.setObjectName("horizontalFrame_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalFrame_2)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.MinValue_LineEdit = QtWidgets.QLineEdit(self.horizontalFrame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.MinValue_LineEdit.sizePolicy().hasHeightForWidth())
        self.MinValue_LineEdit.setSizePolicy(sizePolicy)
        self.MinValue_LineEdit.setStyleSheet("border:2px solid;\n"
"border-radius:8px;\n"
"font: 25 9pt \"Calibri Light\";")
        self.MinValue_LineEdit.setText("")
        self.MinValue_LineEdit.setObjectName("MinValue_LineEdit")
        self.horizontalLayout_3.addWidget(self.MinValue_LineEdit)
        self.label_5 = QtWidgets.QLabel(self.horizontalFrame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_5.sizePolicy().hasHeightForWidth())
        self.label_5.setSizePolicy(sizePolicy)
        self.label_5.setStyleSheet("border:none")
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_3.addWidget(self.label_5)
        self.MaxValue_LineEidt = QtWidgets.QLineEdit(self.horizontalFrame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.MaxValue_LineEidt.sizePolicy().hasHeightForWidth())
        self.MaxValue_LineEidt.setSizePolicy(sizePolicy)
        self.MaxValue_LineEidt.setMinimumSize(QtCore.QSize(0, 21))
        self.MaxValue_LineEidt.setStyleSheet("border:2px solid;\n"
"border-radius:8px;\n"
"font: 25 9pt \"Calibri Light\";")
        self.MaxValue_LineEidt.setText("")
        self.MaxValue_LineEidt.setObjectName("MaxValue_LineEidt")
        self.horizontalLayout_3.addWidget(self.MaxValue_LineEidt)
        self.ValueSet_Label = QtWidgets.QLabel(self.widget)
        self.ValueSet_Label.setGeometry(QtCore.QRect(250, 310, 81, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ValueSet_Label.sizePolicy().hasHeightForWidth())
        self.ValueSet_Label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.ValueSet_Label.setFont(font)
        self.ValueSet_Label.setStyleSheet("border:none")
        self.ValueSet_Label.setAlignment(QtCore.Qt.AlignCenter)
        self.ValueSet_Label.setObjectName("ValueSet_Label")
        self.label_3 = QtWidgets.QLabel(self.widget)
        self.label_3.setGeometry(QtCore.QRect(10, 260, 481, 21))
        self.label_3.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_3.setStyleSheet("font: 75 11pt \"等线\";\n"
"border:none;\n"
"background-color: rgb(62, 255, 133);")
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.gridFrame = QtWidgets.QFrame(self.widget)
        self.gridFrame.setGeometry(QtCore.QRect(30, 50, 441, 91))
        self.gridFrame.setStyleSheet("border:none\n"
"")
        self.gridFrame.setObjectName("gridFrame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridFrame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.HeavyRain_Button = NewPushButton(self.gridFrame)
        self.HeavyRain_Button.setToolTip('12小时:30~69mm\n24小时:50~99mm')
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(10)
        self.HeavyRain_Button.setFont(font)
        # self.HeavyRain_Button.setDefault(True)
        self.HeavyRain_Button.setStyleSheet('''
        QPushButton{background-color: rgb(255, 170, 0);border-radius:10px;
        border-color: rgba(85, 85, 127, 240);
        font: 80 10pt 微软雅黑;
        color: rgb(255, 255, 255);
        }
        QPushButton:checked{background-color: rgb(255, 0, 0);border-radius:10px;
        border-color: rgba(85, 85, 127, 240);
        font: 80 10pt 微软雅黑;
        color: rgb(255, 255, 255);
        }
        ''')
        self.HeavyRain_Button.setObjectName("暴雨")
        self.gridLayout_2.addWidget(self.HeavyRain_Button, 0, 0, 1, 1)
        self.BigWind_Button =NewPushButton(self.gridFrame)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(10)
        self.BigWind_Button.setFont(font)
        self.BigWind_Button.setStyleSheet("QPushButton{\n"
"    background-color: rgb(255, 170, 0);\n"
"border-radius:10px;\n"
"border-color: rgba(85, 85, 127, 240);\n"
"font: 80 10pt \"微软雅黑\";\n"
"color: rgb(255, 255, 255);\n"
"\n"
"}")
        self.BigWind_Button.setObjectName("大风")
        self.BigWind_Button.setToolTip('极大风≥17.2m/s')
        self.gridLayout_2.addWidget(self.BigWind_Button, 0, 1, 1, 1)
        self.LowTemp_Button = NewPushButton(self.gridFrame)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(10)
        self.LowTemp_Button.setFont(font)
        self.LowTemp_Button.setStyleSheet("QPushButton{\n"
"    background-color: rgb(255, 170, 0);\n"
"border-radius:10px;\n"
"border-color: rgba(85, 85, 127, 240);\n"
"font: 80 10pt \"微软雅黑\";\n"
"color: rgb(255, 255, 255);\n"
"\n"
"}")
        self.LowTemp_Button.setObjectName("低温")
        self.LowTemp_Button.setToolTip('日最低气温≤0℃')
        self.gridLayout_2.addWidget(self.LowTemp_Button, 0, 2, 1, 1)
        self.HighTemp_Button = NewPushButton(self.gridFrame)
        self.HighTemp_Button.setToolTip('日最高气温≥35℃')
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(10)
        self.HighTemp_Button.setFont(font)
        self.HighTemp_Button.setStyleSheet("QPushButton{\n"
"background-color: rgb(0, 165, 248);\n"
"border-radius:10px;\n"
"border-color: rgba(85, 85, 127, 240);\n"
"font: 80 10pt \"微软雅黑\";\n"
"color: rgb(255, 255, 255);\n"
"\n"
"}")
        self.HighTemp_Button.setObjectName("高温")
        self.gridLayout_2.addWidget(self.HighTemp_Button, 1, 0, 1, 1)
        self.HeavySnow_Button = NewPushButton(self.gridFrame)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(10)
        self.HeavySnow_Button.setFont(font)

        self.HeavySnow_Button.setStyleSheet("QPushButton{\n"
"background-color: rgb(0, 165, 248);\n"
"border-radius:10px;\n"
"border-color: rgba(85, 85, 127, 240);\n"
"font: 80 10pt \"微软雅黑\";\n"
"color: rgb(255, 255, 255);\n"
"\n"
"}")
        self.HeavySnow_Button.setObjectName("暴雪")
        self.HeavySnow_Button.setToolTip('12小时:≥6mm\n24小时:≥10mm')
        self.gridLayout_2.addWidget(self.HeavySnow_Button, 1, 1, 1, 1)
        self.BigWind_Button_2 = NewPushButton(self.gridFrame)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(10)
        self.BigWind_Button_2.setFont(font)
        self.BigWind_Button_2.setStyleSheet("QPushButton{\n"
"background-color: rgb(0, 165, 248);\n"
"border-radius:10px;\n"
"border-color: rgba(85, 85, 127, 240);\n"
"font: 80 10pt \"微软雅黑\";\n"
"color: rgb(255, 255, 255);\n"
"\n"
"}")
        self.BigWind_Button_2.setObjectName("大雾")
        self.BigWind_Button_2.setToolTip('500~1000m')
        self.gridLayout_2.addWidget(self.BigWind_Button_2, 1, 2, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.widget)
        self.label_4.setGeometry(QtCore.QRect(10, 20, 481, 21))
        self.label_4.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_4.setStyleSheet("font: 75 11pt \"等线\";\n"
"border:none;\n"
"background-color: rgb(62, 255, 133);")
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.stackedWidgetPage1)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(50, 560, 451, 31))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.Runpage_Button = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Runpage_Button.sizePolicy().hasHeightForWidth())
        self.Runpage_Button.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.Runpage_Button.setFont(font)
        self.Runpage_Button.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.Runpage_Button.setAutoFillBackground(False)
        self.Runpage_Button.setStyleSheet("QPushButton{\n"
"    background-color: rgb(124, 175, 121);\n"
"border-radius:12px;\n"
"border:2px dashed;\n"
"border-color: rgba(85, 85, 127, 240);\n"
"font: 75 10pt \"微软雅黑\";\n"
"color: rgb(255, 255, 255);\n"
"\n"
"}")
        self.Runpage_Button.setObjectName("Runpage_Button")
        self.horizontalLayout_7.addWidget(self.Runpage_Button)
        spacerItem2 = QtWidgets.QSpacerItem(30, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem2)
        self.Preview_Button = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Preview_Button.sizePolicy().hasHeightForWidth())
        self.Preview_Button.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.Preview_Button.setFont(font)
        self.Preview_Button.setStyleSheet("QPushButton{\n"
"    background-color: rgb(124, 175, 121);\n"
"border-radius:12px;\n"
"border:2px dashed;\n"
"border-color: rgba(85, 85, 127, 240);\n"
"font: 75 10pt \"微软雅黑\";\n"
"color: rgb(255, 255, 255);\n"
"\n"
"}")
        self.Preview_Button.setObjectName("Preview_Button")
        self.horizontalLayout_7.addWidget(self.Preview_Button)
        spacerItem3 = QtWidgets.QSpacerItem(30, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem3)
        self.Generate_Button = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Generate_Button.sizePolicy().hasHeightForWidth())
        self.Generate_Button.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.Generate_Button.setFont(font)
        self.Generate_Button.setStyleSheet("QPushButton{\n"
"    background-color: rgb(124, 175, 121);\n"
"border-radius:12px;\n"
"border:2px dashed;\n"
"border-color: rgba(85, 85, 127, 240);\n"
"font: 75 10pt \"微软雅黑\";\n"
"color: rgb(255, 255, 255);\n"
"\n"
"}")
        self.Generate_Button.setObjectName("Generate_Button")
        self.horizontalLayout_7.addWidget(self.Generate_Button)
        self.stackedWidget.addWidget(self.stackedWidgetPage1)
        self.stackedWidgetPage2 = QtWidgets.QWidget()
        self.stackedWidgetPage2.setObjectName("stackedWidgetPage2")
        self.stackedWidget.addWidget(self.stackedWidgetPage2)
        self.verticalFrame = QtWidgets.QFrame(self)
        self.verticalFrame.setGeometry(QtCore.QRect(10, 20, 581, 581))
        self.verticalFrame.setMaximumSize(QtCore.QSize(581, 581))
        self.verticalFrame.setStyleSheet("border:2px solid;\n"
"border-radius:5px")
        self.verticalFrame.setObjectName("verticalFrame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalFrame)
        self.verticalLayout.setObjectName("verticalLayout")
        self.textBrowser = QWebEngineView(self.verticalFrame)
        self.textBrowser.load(QUrl('file:///amap.html'))
        self.textBrowser.setStyleSheet("border:2px solid;\n"
                                       "border-radius:10px")
        self.textBrowser.setObjectName("textBrowser")
        self.verticalLayout.addWidget(self.textBrowser)
        self.Confirm_Button = QtWidgets.QPushButton(self.verticalFrame)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(10)
        self.Confirm_Button.setFont(font)
        self.Confirm_Button.setStyleSheet("QPushButton{\n"
"background-color: rgb(0, 165, 248);\n"
"border-radius:10px;\n"
"border-color: rgba(85, 85, 127, 240);\n"
"font: 80 10pt \"微软雅黑\";\n"
"color: rgb(255, 255, 255);\n"
"\n"
"}")
        self.Confirm_Button.setAutoRepeat(True)
        self.Confirm_Button.setAutoDefault(True)
        self.Confirm_Button.setObjectName("Confirm_Button")
        self.verticalLayout.addWidget(self.Confirm_Button)
        self.Hourly_tableWidget = QtWidgets.QTableWidget(self)
        self.Hourly_tableWidget.setGeometry(QtCore.QRect(1110, 21, 352, 351))
        self.Hourly_tableWidget.setStyleSheet("border:2px solid;\n"
"border-radius:5px")
        self.Hourly_tableWidget.setObjectName("Hourly_tableWidget")
        self.Hourly_tableWidget.setColumnCount(0)
        self.Hourly_tableWidget.setRowCount(0)
        self.Daily_tableWidget = QtWidgets.QTableWidget(self)
        self.Daily_tableWidget.setGeometry(QtCore.QRect(1110, 380, 352, 181))
        self.Daily_tableWidget.setStyleSheet("border:2px solid;\n"
"border-radius:5px")
        self.Daily_tableWidget.setObjectName("Daily_tableWidget")
        self.Daily_tableWidget.setColumnCount(0)
        self.Daily_tableWidget.setRowCount(0)

        self.gridLayoutWidget = QtWidgets.QWidget(self)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(1110, 560, 320, 41))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout_3.setContentsMargins(0, 1, 0, 1)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_6 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_6.setObjectName("label_6")
        self.gridLayout_3.addWidget(self.label_6, 0, 0, 1, 1)

        self.min_label = QtWidgets.QLabel(self.gridLayoutWidget)
        self.min_label.setText("")
        self.min_label.setObjectName("min_label")
        self.gridLayout_3.addWidget(self.min_label, 0, 1, 1, 1)

        self.label_8 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_8.setObjectName("label_8")
        self.gridLayout_3.addWidget(self.label_8, 0, 2, 1, 1)

        self.label_len = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_len.setObjectName("label_len")
        self.gridLayout_3.addWidget(self.label_len, 0, 4, 1, 1)

        self.len_label = QtWidgets.QLabel(self.gridLayoutWidget)
        self.len_label.setObjectName("len_label")
        self.gridLayout_3.addWidget(self.len_label, 0, 5, 1, 1)

        self.max_label = QtWidgets.QLabel(self.gridLayoutWidget)
        self.max_label.setText("")
        self.max_label.setObjectName("max_label")
        self.gridLayout_3.addWidget(self.max_label, 0, 3, 1, 1)

        self.sum_label = QtWidgets.QLabel(self.gridLayoutWidget)
        self.sum_label.setText("")
        self.sum_label.setObjectName("sum_label")
        self.gridLayout_3.addWidget(self.sum_label, 1, 1, 1, 1)

        self.label_11 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_11.setObjectName("label_11")
        self.gridLayout_3.addWidget(self.label_11, 1, 0, 1, 1)
        self.label_12 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_12.setObjectName("label_12")
        self.gridLayout_3.addWidget(self.label_12, 1, 2, 1, 1)
        self.avg_label = QtWidgets.QLabel(self.gridLayoutWidget)
        self.avg_label.setText("")
        self.avg_label.setObjectName("avg_label")
        self.gridLayout_3.addWidget(self.avg_label, 1, 3, 1, 1)
        self.stackedWidget.setCurrentIndex(0)
        self.Usage_Combox.setCurrentIndex(0)
        self.Operator_Combox.setCurrentIndex(4)
        ##设置文本信息
        self.label.setText("----------------------------基本信息填写----------------------------")
        self.Client_Label.setText("法人信息：")
        self.Usage_Label.setText("区域：")
        self.Usage_Combox.setItemText(0,'镇江市区')
        self.Usage_Combox.setItemText(1, "京口区")
        self.Usage_Combox.setItemText(2, "润州区")
        self.Usage_Combox.setItemText(3, '丹徒区')
        self.Usage_Combox.setItemText(4, '镇江新区')
        self.Usage_Combox.setItemText(5, '高新区')
        self.Usage_Combox.setItemText(6, '句容市')
        self.Usage_Combox.setItemText(7, '丹阳市')
        self.Usage_Combox.setItemText(8, '扬中市')
        self.Starttime_Label.setText("起始时间：")
        self.Endtime_Label.setText("终止时间：")
        self.Station_Label.setText("站点名称：")
        self.Operator_Label.setText("操作人员：")
        self.Operator_Combox.setItemText(0, "孙翠梅")
        self.Operator_Combox.setItemText(1, "张孝龙")
        self.Operator_Combox.setItemText(2, "王燕")
        self.Operator_Combox.setItemText(3, "尹君")
        self.Operator_Combox.setItemText(4, "戴晨")
        self.Operator_Combox.setItemText(5, "吴昕悦")
        self.Makedate_Label.setText("制作日期：")
        self.HighTemp_CB.setText("最高气温")
        self.MaxSpeed_CB.setText("极大风")
        self.LowTemp_CB.setText("最低气温")
        self.Visibility_CB.setText("能见度")
        self.RainFall_CB.setText("降水")
        self.HourTemp_CB.setText("整点气温")
        self.label_2.setText("---------------------------要素信息-----------------------------")
        self.Condition_Label.setText("时间类型：")
        self.Condition_Combox.setItemText(0, "小时值")
        self.Condition_Combox.setItemText(1, "日值")
        self.label_5.setText("—")
        self.ValueSet_Label.setText("数值范围：")
        self.label_3.setText("----------------------------遴选条件------------------------------")
        self.HeavyRain_Button.setText("暴雨")
        self.BigWind_Button.setText("大风")
        self.LowTemp_Button.setText("低温")
        self.HighTemp_Button.setText("高温")
        self.HeavySnow_Button.setText("暴雪")
        self.BigWind_Button_2.setText("大雾")
        self.label_4.setText("---------------------------快捷配置-----------------------------")
        self.Runpage_Button.setText("网页启动")
        self.Generate_Button.setText("文件生成")
        self.Preview_Button.setText("数据预览")
        self.Confirm_Button.setText("确认当前气象站点")
        self.label_6.setText('最小值:')
        self.label_8.setText('最大值:')
        self.label_11.setText('累计值:')
        self.label_12.setText('平均值:')
        self.label_len.setText('计数:')

        ##Button信号槽绑定
        self.thread = Runpage_Thread()
        self.Runpage_Button.clicked.connect(self.get_main_info)
        self.thread.signal.connect(self.update_progress_dialog)
        self.Confirm_Button.clicked.connect(self.station_runjs)
        hdate = self.Starttime_DateEdit.date().toString('yyyy年MM月dd日')
        self.Generate_Button.clicked.connect(lambda: self.Generate(self.Client_LineEdit.text(),
                                                                   self.Usage_Combox.currentText(),self.Makedate_LineEdit.text(),
                                                                  hdate))
        self.Preview_Button.clicked.connect(self.Preview)

        self.Hourly_tableWidget.itemSelectionChanged.connect(lambda:self.compute_choosen_values(self.Hourly_tableWidget))
        self.Daily_tableWidget.itemSelectionChanged.connect(lambda: self.compute_choosen_values(self.Daily_tableWidget))
        self.buttonGroup.buttonToggled.connect(self.Preview)
        self.HeavyRain_Button.clicked.connect(self.ModeChange_Rain_Snow)
        self.HeavySnow_Button.clicked.connect(self.ModeChange_Rain_Snow)
        self.HeavyRain_Button.rightclicked.connect(self.ModeChange_Rain_Snow)
        self.HeavySnow_Button.rightclicked.connect(self.ModeChange_Rain_Snow)
        self.HighTemp_Button.clicked.connect(self.ModeChange_Temp_Wind_Fog)
        self.LowTemp_Button.clicked.connect(self.ModeChange_Temp_Wind_Fog)
        self.BigWind_Button.clicked.connect(self.ModeChange_Temp_Wind_Fog)
        self.BigWind_Button_2.clicked.connect(self.ModeChange_Temp_Wind_Fog)
        self.button_state.connect(self.temp_change)

    def get_main_info(self):
        self.progress_dialog = QProgressDialog(self)
        self.progress_dialog.setWindowTitle("请稍等")
        self.progress_dialog.setCancelButtonText("取消")
        self.progress_dialog.setRange(0, 100)
        station = self.Station_LineEdit.text()
        startdate = self.Starttime_DateEdit.date().toString("yyyy-MM-dd")
        enddate = self.Endtime_DateEdit.date().toString("yyyy-MM-dd")
        main_info = {'station': station,
                     'startdate': startdate,
                     'enddate': enddate}
        # 调用线程接收主线程传递数据的方法
        self.thread.accept_info_from_main(main_info)
        # self.thread1.accept_info_from_main(main_info)
        # 开启子线程
        self.thread.start()
        # self.thread1.start()
    def update_progress_dialog(self,text,num):
        self.progress_dialog.setLabelText("正在检索..."+text)
        if  self.Endtime_DateEdit.date().toString("yyyy-MM-dd") not in text:
            self.progress_dialog.setValue(num)
        else:
            QMessageBox.information(self, "提示", "检索完毕")

    def temp_change(self,string):
        self.temp=string

    temp = ''
    button_state = QtCore.pyqtSignal(str)
    def ModeChange_Rain_Snow(self,string):
        sender =self.sender()
        default_text = sender.objectName()
        self.RainFall_CB.setChecked(1)
        self.Condition_Combox.setCurrentText('小时值')
        if string=='1' or string=='4':
            sender.setText(default_text+'12h')
            self.Hourly_tableWidget.itemClicked.connect(lambda: self.items_auto_select(12))
            self.MinValue_LineEdit.setText(['30' if '雨' in default_text else '6'][0])
            self.button_state.emit(default_text+'12h')
        elif string=='2' or string=='5':
            sender.setText(default_text+'24h')
            self.Hourly_tableWidget.itemClicked.connect(lambda: self.items_auto_select(24))
            self.MinValue_LineEdit.setText(['50' if '雨' in default_text else '10'][0])
            self.button_state.emit(default_text + '24h')
        elif string == '0' or string=='3':
            sender.setText(default_text)
            self.Hourly_tableWidget.itemClicked.connect(lambda: self.items_auto_select(24))
            self.Hourly_tableWidget.itemClicked.disconnect()
            self.MinValue_LineEdit.setText('')
            self.button_state.emit('')

    def ModeChange_Temp_Wind_Fog(self,string):
        button_xy_dict = {'大风':5,'低温':2,'高温':1,'大雾':4}
        Min_Max_dict= {'暴雨12h':[30,''],'暴雨24h':[50,''],'大风':['17.2',''],
                       '低温':['','0'],'高温':['35',''],'暴雪12h':['6',''],'暴雪24h':[10,''],
                       '大雾':['500','']}
        sender=self.sender()
        default_text = sender.objectName()
        self.buttonGroup.button(button_xy_dict[default_text]).setChecked(True)
        self.Condition_Combox.setCurrentText(['小时值' if '风' in default_text else '日值'][0])
        if (string=='1') or (string=='3') or (string=='5'):
            sender.setText(sender.toolTip())
            self.button_state.emit(default_text)
            if ('雨' in sender.text()) or ('雪' in sender.text()):
                self.MinValue_LineEdit.setText(Min_Max_dict[sender.text()][0])
                self.MaxValue_LineEidt.setText(Min_Max_dict[sender.text()][1])
            else:
                self.MinValue_LineEdit.setText(Min_Max_dict[default_text][0])
                self.MaxValue_LineEidt.setText(Min_Max_dict[default_text][1])
        if string =='0' or string=='2' or string=='4':
            sender.setText(default_text)
            self.button_state.emit('')
            self.MinValue_LineEdit.setText('')
            self.MaxValue_LineEidt.setText('')

    def items_auto_select(self,num):
        items = self.Hourly_tableWidget.selectedItems()
        len_all = self.Hourly_tableWidget.rowCount()
        if items!=[]:
            first_item = items[0]
            first_item_row = first_item.row()
        else:
            first_item_row=0
        for i in range(num):
            if first_item_row+i<len_all:
                self.Hourly_tableWidget.item(first_item_row+i,1).setSelected(True)

    def Generate(self, client, location, mdate, hdate):
        if self.Condition_Combox.currentText() == '日值':
            tablewidget = self.Daily_tableWidget
        else:
            tablewidget = self.Hourly_tableWidget
        items = tablewidget.selectedItems()
        if len(items) != 0:
            datetime_list = [tablewidget.item(item.row(), 0).text() for item in items]
            items_list = [float(item.text()) for item in items]
        else:
            datetime_list = [tablewidget.item(row, 0).text() for row in range(tablewidget.rowCount())]
            items_list = [float(tablewidget.item(row, 1).text()) for row in range(tablewidget.rowCount())]
            QMessageBox.information(self, '提示', '请选中时段!')
        unit_dict = {'最高气温': "℃", '最低气温': "℃", '整点气温': "℃", '降水': 'mm', '能见度': 'm', '极大风': 'm/s'}
        unit = unit_dict[self.buttonGroup.checkedButton().text()]

        min = self.min_label.text() + unit
        max = self.max_label.text() + unit
        avg = self.avg_label.text() + unit
        sum = self.sum_label.text() + unit
        count = self.len_label.text()
        if (self.MinValue_LineEdit.text() == '') & (self.MaxValue_LineEidt.text() == ''):
            text_str = '根据查阅{}气象站点历史资料显示，{}至{}期间，连续{}小时/天，{}最小值为{}，最大值为{}，' \
                       '平均值为{}，累计值为{}。'.format(self.Station_LineEdit.text(), datetime_list[0], datetime_list[-1],
                                               count, self.buttonGroup.checkedButton().text(), min, max, avg, sum)
        elif (self.MinValue_LineEdit.text() != '') | (self.MaxValue_LineEidt.text() != ''):
            if self.MinValue_LineEdit.text() == '':
                bot_limit = -9999
            else:
                bot_limit = float(self.MinValue_LineEdit.text())
            if self.MaxValue_LineEidt.text() == '':
                top_limit = 99999
            else:
                top_limit = float(self.MaxValue_LineEidt.text())
            DayOrHour = ['小时' if len(datetime_list[0]) > 12 else '天'][0]
            items_array = np.array(items_list)
            datetime_array = np.array(datetime_list)
            tar_items_list = items_array[(bot_limit <= items_array) & (items_array <= top_limit)]
            tar_datetime_list = datetime_array[(bot_limit <= items_array) & (items_array <= top_limit)]
            BiggerThanText = \
            ['大于等于{}'.format(self.MinValue_LineEdit.text() + unit) if self.MinValue_LineEdit.text() != '' else ''][0]
            SmallerThanText = \
            ['小于等于{}'.format(self.MaxValue_LineEidt.text() + unit) if self.MaxValue_LineEidt.text() != '' else ''][0]
            StatisticText = '累计降水量为{}，'.format(sum)
            try:
                CriticalText1 = [('{}' + '达到{}标准'.format(self.temp)).format(
                    ['未' if float(self.sum_label.text()) < float(self.MinValue_LineEdit.text()) else ''][0])][0]
            except:
                CriticalText1 = ''

            MainText1 = StatisticText + CriticalText1
            CriticalText2_sub = '(达到{}标准)'.format(self.temp)
            CriticalText2 = [CriticalText2_sub if self.temp != '' else ''][0]
            MainText2 = '满足{}{}{}{}的{}数共计{}{}'.format(self.buttonGroup.checkedButton().text(), BiggerThanText,
                                                      SmallerThanText, CriticalText2, DayOrHour, len(tar_datetime_list),
                                                      DayOrHour)
            if len(tar_datetime_list) != 0:
                MainText2 += '，具体为:'
                for idatetime, item in zip(tar_datetime_list, tar_items_list):
                    MainText2 += ':'.join([idatetime, str(item) + unit + '，'])
            MainText = \
            [MainText1 if ('暴' in self.temp) & (self.Condition_Combox.currentText() == '小时值') else MainText2][0]
            text_str = '根据查阅{}气象站点资料显示，{}至{}期间，连续{}{}，{}。'.format(self.Station_LineEdit.text(), datetime_list[0],
                                                                  datetime_list[-1],
                                                                  count, DayOrHour, MainText)

        self.textwindow = TextWindow(client, location, mdate, hdate, text_str)
        self.textwindow.show()

    def Preview(self):
        try:
            self.hourdata = pd.read_pickle('hourdata_pickle')
            self.daydata = pd.read_pickle('daydata_pickle')
        except Exception as e:
            print(e)

        self.selectedCon = self.Condition_Combox.currentText()
        self.data_to_tablewidget(self.Hourly_tableWidget,self.hourdata,timestr="%Y.%m-%d_ %H?")
        self.data_to_tablewidget(self.Daily_tableWidget,self.daydata,timestr="%Y.%m-%d_")

    def compute_choosen_values(self,tablewidget):
        items =tablewidget.selectedItems()
        if len(items)!=0:
            items_list = [float(item.text()) for item in items]
            self.min_label.setText(str(np.min(items_list)))
            self.max_label.setText(str(np.max(items_list)))
            self.avg_label.setText(str(np.round(np.mean(items_list),2)))
            self.sum_label.setText(str(np.round(np.sum(items_list),1)))
            self.len_label.setText(str(len(items_list)))

    def data_to_tablewidget(self,tablewidget,data,timestr):
        tablewidget.setColumnCount(2)
        tablewidget.setRowCount(data.shape[0])
        self.selectedInfo = self.buttonGroup.checkedButton().text()
        for row in range(data.shape[0]):
             newItem0 = QTableWidgetItem(data.index.tolist()[row].strftime(timestr).replace('.','年').replace('-','月').replace('_','日').replace('?','时'))
             newItem0.setFlags(Qt.ItemIsSelectable)
             newItem = QTableWidgetItem(data[self.selectedInfo].values[row])
             newItem.setTextAlignment(Qt.AlignCenter | Qt.AlignBottom)

             tablewidget.setItem(row,1,newItem)
             tablewidget.setItem(row, 0, newItem0)

        tablewidget.setHorizontalHeaderLabels(('时间', self.selectedInfo))
        tablewidget.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeToContents)
        tablewidget.horizontalHeader().setStretchLastSection(True)

    def stationset(self, station):
        self.Station_LineEdit.setText(str(station))
        self.station = station

    def station_runjs(self):
        self.textBrowser.page().runJavaScript("getValue();", self.stationset)
        self.year = datetime.datetime.now().strftime("%Y") + '年'
        self.month = datetime.datetime.now().strftime("%m") + '月'
        self.day = datetime.datetime.now().strftime("%d") + '日'
        self.NowDate = self.year + self.month + self.day
        self.Makedate_LineEdit.setText(str(self.NowDate))


class TextWindow(QWidget):
    def __init__(self,client,location,mdate,hdate,Text):
        super().__init__()
        self.client=client
        self.location =location
        self.mdate =mdate
        self.hdate =hdate
        self.text =Text
        self.setWindowTitle('内容编辑')
        self.resize(810, 378)
        pathfile = open('output_path.pkl','rb')
        self.path = pickle.load(pathfile)
        existfiles = glob.glob(self.path + '*.docx')
        self.number=['0'+str(len(existfiles)+1) if len(existfiles)<9 else str(len(existfiles)+1)][0]
        self.series_number = self.path[-4:]+self.number
        self.path=self.path+self.number+self.client+'.docx'
        self.initUI(self.path,self.series_number)
    def initUI(self,path,number):
        self.setObjectName("widget")
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sizePolicy().hasHeightForWidth())
        self.setSizePolicy(sizePolicy)
        self.pushButton = QtWidgets.QPushButton(self)
        self.pushButton.setGeometry(QtCore.QRect(250, 330, 131, 41))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        font.setItalic(False)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self)
        self.pushButton_2.setGeometry(QtCore.QRect(410, 330, 131, 41))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        font.setItalic(False)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.widget = QtWidgets.QWidget(self)
        self.widget.resize(801, 321)
        self.widget.setObjectName("widget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_2.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_savepath = QtWidgets.QPushButton(self.widget)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_savepath.setFont(font)
        self.pushButton_savepath.setObjectName("pushButton_savepath")
        self.horizontalLayout.addWidget(self.pushButton_savepath)
        self.lineEdit_savepath = QtWidgets.QLineEdit(self.widget)
        self.lineEdit_savepath.setEnabled(True)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.lineEdit_savepath.setFont(font)
        self.lineEdit_savepath.setObjectName("lineEdit_savepath")
        self.horizontalLayout.addWidget(self.lineEdit_savepath)
        self.lineEdit_savepath.setText(path)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_2 = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_3.addWidget(self.label_2)
        self.lineEdit_client = QtWidgets.QLineEdit(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_client.sizePolicy().hasHeightForWidth())
        self.lineEdit_client.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(10)
        self.lineEdit_client.setFont(font)
        self.lineEdit_client.setText(self.client)
        self.lineEdit_client.setObjectName("lineEdit_client")
        self.horizontalLayout_3.addWidget(self.lineEdit_client)
        self.label = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.horizontalLayout_3.addWidget(self.label)
        self.lineEdit_number = QtWidgets.QLineEdit(self.widget)
        self.lineEdit_number.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_number.sizePolicy().hasHeightForWidth())
        self.lineEdit_number.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(10)
        self.lineEdit_number.setFont(font)
        self.lineEdit_number.setText("")
        self.lineEdit_number.setObjectName("lineEdit_number")
        self.horizontalLayout_3.addWidget(self.lineEdit_number)
        self.label_3 = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_3.addWidget(self.label_3)
        self.lineEdit_date = QtWidgets.QLineEdit(self.widget)
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(10)
        self.lineEdit_date.setFont(font)
        self.lineEdit_date.setObjectName("lineEdit_date")
        self.horizontalLayout_3.addWidget(self.lineEdit_date)
        self.label_5 = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_3.addWidget(self.label_5)
        self.lineEdit_location = QtWidgets.QLineEdit(self.widget)
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(10)
        self.lineEdit_location.setFont(font)
        self.lineEdit_location.setObjectName("lineEdit_location")
        self.horizontalLayout_3.addWidget(self.lineEdit_location)
        self.verticalLayout_2.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)
        self.horizontalLayout_2.setSpacing(4)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_4 = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_2.addWidget(self.label_4)
        font1 = QtGui.QFont()
        font1.setFamily("楷体")
        font1.setPointSize(18)
        self.textEdit_weatherCondition = QtWidgets.QTextEdit(self.widget)
        self.textEdit_weatherCondition.setObjectName("textEdit_weatherCondition")
        self.textEdit_weatherCondition.setFont(font1)
        self.horizontalLayout_2.addWidget(self.textEdit_weatherCondition)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.lineEdit_number.setText(number)
        self.pushButton.setText("生成Word")
        self.pushButton_2.setText("打开Word")
        self.pushButton_savepath.setText("选择文件夹")
        self.label_2.setText("申请人：")
        self.label.setText("编号：")
        self.label_3.setText("时间：")
        self.label_5.setText("地点：")
        self.label_4.setText("天气状况：")
        self.pushButton_savepath.clicked.connect(self.Savepath_button_click)
        self.lineEdit_date.setText(self.hdate)
        self.lineEdit_location.setText(self.location)
        self.textEdit_weatherCondition.setText(self.text)
        self.lineEdit_client.textChanged.connect(self.Client_changed)
        self.pushButton.clicked.connect(lambda:self.Generate_Word(self.lineEdit_number.text(),self.lineEdit_client.text(),self.lineEdit_location.text(),self.textEdit_weatherCondition.toPlainText(),self.lineEdit_date.text()))
        self.pushButton_2.clicked.connect(self.openfile_button_click)

    def Client_changed(self):
        path0=self.lineEdit_savepath.text().split(os.sep)[0]
        path1 = self.lineEdit_savepath.text().split('.')[0].split(os.sep)[1][:10]
        self.lineEdit_savepath.setText(path0+os.sep+path1+self.client+'.docx')
    def openfile_button_click(self):
        word = wc.Dispatch('Word.Application')
        word.Documents.Open(self.lineEdit_savepath.text())

    def Savepath_button_click(self):
        dir_choose = QFileDialog.getExistingDirectory(self,'选取文件夹',self.path)
        tpath = dir_choose+os.sep+'气象证明'+str(datetime.datetime.now().year)
        out = open('output_path.pkl','wb')
        pickle.dump(tpath,out)
        existfiles = glob.glob(tpath+'*.docx')
        number=['0'+str(len(existfiles)+1) if len(existfiles)<9 else str(len(existfiles)+1)][0]
        targetpath=tpath+number+self.client+'.docx'
        self.lineEdit_savepath.setText(targetpath)
        self.lineEdit_number.setText(str(datetime.datetime.now().year)+number)

    def Generate_Word(self,number,client,location,text,hdate):
        doc = Document()
        def SetFontStyle(p, text, size, fontname,alignment,rgb,linespace=1.0,upspace =0,downspace=0,underline=False,bold=True,):
            alignment_dict = {'center':WD_PARAGRAPH_ALIGNMENT.CENTER,'right':WD_PARAGRAPH_ALIGNMENT.RIGHT,'left':WD_PARAGRAPH_ALIGNMENT.LEFT}
            p.alignment = alignment_dict[alignment]
            paragraph_format = p.paragraph_format
            paragraph_format.space_after=Pt(upspace)
            paragraph_format.space_before = Pt(downspace)
            paragraph_format.line_spacing_rule = [WD_LINE_SPACING.EXACTLY if linespace !=1.0 else WD_LINE_SPACING.SINGLE][0]
            paragraph_format.line_spacing = [Pt(linespace) if linespace !=1.0 else linespace][0]
            run = p.add_run(text)
            run.font.size = Pt(size)
            run.font.bold=bold
            run.font.underline=underline
            run.font.name = fontname
            run.font.color.rgb = RGBColor(rgb[0], rgb[1], rgb[2])
            r = run._element
            r.rPr.rFonts.set(qn('w:eastAsia'), fontname)

        p1 = doc.add_paragraph()
        p2 = doc.add_paragraph()
        p3 = doc.add_paragraph()
        p4 = doc.add_paragraph()
        p5 = doc.add_paragraph()
        maintext='申请人：{}\n事发时间：{}\n事发地点：{}\n天气状况：' \
                 '{}\n\n    特此证明\n（本证明仅用于{}的保险理赔。）\n\n'.format(client,hdate,location,text,client)
        SetFontStyle(p1,text='气 象 证 明',size=36,linespace=50,fontname=u'方正小标宋_GBK',alignment='center',rgb=[255,0,0])
        SetFontStyle(p2, text='——————————————', size=30,linespace=13,fontname='Times New Roman', alignment='center', rgb=[255, 0, 0])
        SetFontStyle(p3,text='编号：'+number+'\n',size=16,fontname=u'仿宋',linespace=28,bold=False,alignment='right',rgb=[0,0,0])
        SetFontStyle(p4,text=maintext,size=16,fontname=u'仿宋',bold=False,linespace=30,alignment='left',rgb=[0,0,0])
        SetFontStyle(p5,text=self.mdate,size=16,fontname=u'仿宋',bold=False,linespace=30,alignment='right',rgb=[0,0,0])
        doc.save(self.lineEdit_savepath.text())


class NewPushButton(QtWidgets.QPushButton):
    clicked1 = QtCore.pyqtSignal(bool)
    clicked = QtCore.pyqtSignal(str)
    rightclicked = QtCore.pyqtSignal(str)
    def __init__(self, parent=None):
        super(QtWidgets.QPushButton, self).__init__(parent)
        self.clicked1.connect(self.count1)
        self.i=0
    def count1(self):
        self.i+=1
        if self.i%6==0:
            self.clicked.emit('0')
        elif self.i%6==1:
            self.clicked.emit('1')
        elif self.i%6 == 2:
            self.clicked.emit('2')
        elif self.i %6 == 3:
            self.clicked.emit('3')
        elif self.i%6==4:
            self.clicked.emit('4')
        elif self.i%6 == 5:
            self.clicked.emit('5')
    def mousePressEvent(self,event):  # 重定义该函数，对不同的操作释放不同的信号参数
        if event.buttons() == Qt.LeftButton:
            self.clicked1.emit(True)
        if event.buttons() == Qt.RightButton:
            self.rightclicked.emit('0')

class Runpage_Thread(QThread):
    signal = QtCore.pyqtSignal(str,float)

    def __init__(self):
        super(Runpage_Thread,self).__init__()
        self.station=""
        self.Startdate=""
        self.Enddate=""

    def accept_info_from_main(self,main_info):
        self.station=main_info.get("station")
        self.Startdate=main_info.get("startdate")
        self.Enddate =main_info.get("enddate")
        caps = {"browserName": "MicrosoftEdge",
                "version": "",
                "platform": "WINDOWS",
                "ms:edgeOptions": {
                    'extensions': [],
                    'args': ['--headless',
                             '--disable-gpu']}}
        self.browser = Edge(EdgeChromiumDriverManager().install(), caps)
        self.browser.set_window_size(3000, 2000)  # 设置窗口大小以保存
        self.browser.get("http://10.127.192.120/index.php")
        self.browser.find_element_by_xpath('/html/body/center/table[3]/tbody/tr[6]/td[1]/li[2]/a').click()

    def run(self):
        self.stationSelect = Select(self.browser.find_element_by_name("tt"))
        self.stationSelect.select_by_visible_text(self.station + '站')
        sleep(1)
        Startdate1 = datetime.datetime.strptime(self.Startdate, '%Y-%m-%d') + datetime.timedelta(days=-1)
        Startdate1 = Startdate1.strftime("%Y-%m-%d")
        # Enddate = Endtime_DateEdit.date().toString("yyyy-MM-dd")
        hourindex = pd.date_range(start=Startdate1 + ' 21:00:00', end=self.Enddate + ' 20:00:00', freq='H')
        dayindex = pd.date_range(start=self.Startdate, end=self.Enddate, freq='D')
        hour_array = np.array([]).reshape(-1, 6)
        day_array = np.array([]).reshape(-1, 6)
        for i in range(len(dayindex)):
            date = dayindex[i].strftime("%Y-%m-%d")
            dateInput = self.browser.find_element_by_xpath('//form[@name="ff"]/input[4]')
            # 输入日期
            dateInput.send_keys(Keys.CONTROL + 'a')
            dateInput.send_keys(Keys.DELETE)
            dateInput.send_keys(date)
            # 按下查询键
            self.browser.find_element_by_xpath('//form[@name="ff"]/input[5]').click()
            # 查询
            rainfall = [
                self.browser.find_element_by_xpath('//*[@id="Layer1"]/table/tbody/tr[{}]/td[1]'.format(str(i))).text for
                i in range(3, 28)]
            hourtemp = [
                self.browser.find_element_by_xpath('//*[@id="Layer1"]/table/tbody/tr[{}]/td[2]'.format(str(i))).text for
                i in range(3, 28)]
            maxtemp = [
                self.browser.find_element_by_xpath('//*[@id="Layer1"]/table/tbody/tr[{}]/td[3]'.format(str(i))).text for
                i in range(3, 28)]
            mintemp = [
                self.browser.find_element_by_xpath('//*[@id="Layer1"]/table/tbody/tr[{}]/td[5]'.format(str(i))).text for
                i in range(3, 28)]
            maxspeed = [
                self.browser.find_element_by_xpath('//*[@id="Layer1"]/table/tbody/tr[{}]/td[22]'.format(str(i))).text
                for i in range(3, 28)]
            if self.station in ['句容', '扬中', '丹阳']:
                # BigWind_Button_2.setCheckable(True)
                minvis = [self.browser.find_element_by_xpath(
                    '//*[@id="Layer1"]/table/tbody/tr[{}]/td[45]'.format(str(i))).text for i in range(3, 28)]
            elif self.station == '镇江':
                # BigWind_Button_2.setCheckable(True)
                minvis = [self.browser.find_element_by_xpath(
                    '//*[@id="Layer1"]/table/tbody/tr[{}]/td[49]'.format(str(i))).text for i in range(3, 28)]
            else:
                # BigWind_Button_2.setCheckable(False)
                minvis = [self.browser.find_element_by_xpath(
                    '//*[@id="Layer1"]/table/tbody/tr[{}]/td[23]'.format(str(i))).text for i in range(3, 28)]
            array = np.array([rainfall, hourtemp, maxtemp, mintemp, maxspeed, minvis]).T
            hour_array = np.r_[hour_array, array[:-1, :]]
            day_array = np.r_[day_array, array[-1, :].reshape(-1, 6)]
            self.signal.emit(self.station+date,float(i/len(dayindex)*100))
            # print(self.station+date+str(i/len(dayindex)*100))
        hourdata = pd.DataFrame(hour_array, columns=['降水', '整点气温', '最高气温', '最低气温', '极大风', '能见度'], index=hourindex)
        daydata = pd.DataFrame(day_array, columns=['降水', '整点气温', '最高气温', '最低气温', '极大风', '能见度'], index=dayindex)
        hourdata.to_pickle('hourdata_pickle')
        daydata.to_pickle('daydata_pickle')
        self.signal.emit("已检索完毕",100.0)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = Meteo_DataService()
    ex.show()
    sys.exit(app.exec_())
